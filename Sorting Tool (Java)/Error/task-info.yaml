type: edu
custom_name: Error!
files:
  - name: src/sorting/Main.java
    visible: true
    text: |
      package sorting;
      
      import java.util.*;
      import java.util.function.Function;
      import java.util.stream.Collectors;
      
      public class Main {
          private static Scanner scanner;
      
          public static void main(final String[] args) {
              //Setup scanner
              scanner = new Scanner(System.in);
      
              //Parse command line args
              String datatype = getDataType(args);
              String sortType = getSortType(args);
              ArrayList<Object> list = new ArrayList<>();
      
              //Load based on sort type
              loadObjectList(list, datatype);
      
              //Report number
              System.out.println(totalNumber(list, datatype));
      
              //Sort
              if (!"line".equals(datatype) && "natural".equals(sortType)) {
                  System.out.print("Sorted data: ");
              } else if ("line".equals(datatype) && "natural".equals(sortType)) {
                  System.out.println("Sorted data: ");
              }
              if ("natural".equals(sortType))
                  sortNatural(list, datatype);
              else
                  sortByCount(list, datatype);
          }
      
          private static void process(ArrayList<Object> list, String type) {
              System.out.println("Total " + (type.equals("line") ? "lines" : "numbers")
                      + ": " + list.size() + ".");
              System.out.print("The " + (type.equals("line") ? "longest line" : "greatest number")
                      + ": ");
              Object maxInstance;
              int numTimes;
              maxInstance = Collections.max(list, list.get(0) instanceof Long ?
                      (o1, o2) -> (int) ((Long) o1 - (Long) o2)
                      :
                      (o1, o2) -> ((String) o1).length() - ((String) o2).length()
              );
              numTimes = Collections.frequency(list, maxInstance);
              String percentString = "(" + numTimes + " time(s), " + (numTimes * 100 / list.size()) + "%).";
              if (type.equals("line")) {
                  System.out.println();
                  System.out.println(maxInstance);
                  System.out.println(percentString);
              } else {
                  System.out.println(maxInstance + " " + percentString);
              }
      
          }
      
          private static String getDataType(String[] args) {
              for (int i = 0; i < args.length; ++i) {
                  if ("-dataType".equals(args[i]) && i < args.length - 1) {
                      if ("long".equals(args[i + 1]))
                          return "long";
                      else if ("word".equals(args[i + 1]))
                          return "word";
                      else if ("line".equals(args[i + 1]))
                          return "line";
                  }
              }
              return "word";
          }
      
          private static String getSortType(String[] args) {
              for (int i = 0; i < args.length; ++i) {
                  if ("-sortingType".equals(args[i]) && i < args.length - 1)
                      if ("natural".equals(args[i + 1]))
                          return "natural";
                      else if ("byCount".equals(args[i + 1]))
                          return "byCount";
              }
              return "natural";
          }
      
          private static void loadObjectList(ArrayList<Object> list, String dataType) {
              if ("long".equals(dataType))
                  while (scanner.hasNextLong())
                      list.add(scanner.nextLong());
              else if ("line".equals(dataType))
                  while (scanner.hasNextLine())
                      list.add(scanner.nextLine());
              else
                  while (scanner.hasNext())
                      list.add(scanner.next());
          }
      
          private static String totalNumber(ArrayList<Object> list, String dataType) {
              if ("long".equals(dataType))
                  return "Total numbers: " + list.size() + ".";
              else if ("line".equals(dataType))
                  return "Total lines: " + list.size() + ".";
              else
                  return "Total words: " + list.size() + ".";
      
          }
      
          private static void sortNatural(ArrayList<Object> list, String dataType) {
              if ("long".equals(dataType))
                  list.stream()
                          .mapToLong(i -> (Long) i).sorted()
                          .forEach(d -> System.out.print(d + " "));
              else if ("line".equals(dataType))
                  list.stream()
                          .sorted((s1, s2) -> ((String) s1).compareTo((String) s2))
                          .forEach(System.out::println);
              else
                  list.stream()
                          .sorted((s1, s2) -> ((String) s1).compareTo((String) s2))
                          .forEach(s -> System.out.print(s + " "));
      
          }
      
          private static void sortByCount(ArrayList<Object> list, String dataType) {
              Comparator<Map.Entry<Object, Long>> customComparator = (o1, o2) -> {
                  int val = (int) (o1.getValue() - o2.getValue());
                  if (val == 0) {
                      if ("long".equals(dataType))
                          return (int) (((Long) o1.getKey()) - ((Long) o2.getKey()));
                      else
                          return ((String) o1.getKey()).compareTo((String) o2.getKey());
                  } else
                      return val;
              };
      
              HashMap<Object, Long> countMap = list.stream()
                      .collect(Collectors.groupingBy(Function.identity(), HashMap::new, Collectors.counting()));
              countMap.entrySet().stream()
                      .sorted(customComparator)
                      .forEach(o -> System.out.println(o.getKey() + ": " + o.getValue() + " time(s), " + (100 * o.getValue() / list.size()) + "%"));
          }
      }
    learner_created: false
  - name: test/common/SortingToolStage5Test.kt
    visible: false
    text: |+
      package common
      
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testcase.TestCase
      import org.hyperskill.hstest.testing.Settings
      import java.util.*
      
      class SortingToolStage5Test : StageTest<SortingToolClue>() {
      
          init {
              Settings.allowOutOfInput = true
          }
      
          override fun generate(): List<TestCase<SortingToolClue>> {
              return stage4Tests() + stage5Tests()
          }
      
          override fun check(reply: String, clue: SortingToolClue): CheckResult {
              return when {
                  badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                  "byCount" in clue.args -> checkByCount(reply, clue)
                  else -> checkNatural(reply, clue)
              }
          }
      
          private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
              return when {
                  "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                  "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                  "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)
      
                  else -> throw IllegalArgumentException("Bad test: no data type found")
              }
          }
      
          private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
              return when {
                  "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                  "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                  "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)
      
                  else -> throw IllegalArgumentException("Bad test: no data type found")
              }
          }
      
          private fun badArgs(args: List<String>): Boolean {
              val unknownArgs =
                      args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")
      
              if (unknownArgs.isNotEmpty()) {
                  return true
              }
      
              if (args.last() == "-dataType" || args.last() == "-sortingType") {
                  return true
              }
      
              return false
          }
      }
      
      fun stage5Tests(): List<TestCase<SortingToolClue>> {
          return listOf(
                  createTest(
                          """
                      |1 -2   333 4
                      |42
                      |1                 1
                      """.trimMargin(),
                          true,
                          "-sortingType"
                  ),
                  createTest(
                          """
                      |1 -2   333 4
                      |42
                      |1                 1
                      """.trimMargin(),
                          true,
                          "-sortingType", "byCount", "-dataType", "long", "-abc"
                  ),
                  createTest(
                          """
                      |1111 1111
                      |22222
                      |3
                      |44
                      """.trimMargin(),
                          false,
                          "-sortingType", "byCount", "-dataType", "line", "-cde"
                  ),
                  createTest(
                          """
                      |1111 1111
                      |22222
                      |3
                      |44
                      """.trimMargin(),
                          false,
                          "-dataType", "line", "-sortingType"
                  )
          )
      }
      
      
      fun stage4Tests(): List<TestCase<SortingToolClue>> {
          return listOf(
                  createTest(
                          """
                      |1 -2   333 4
                      |42
                      |1                 1
                      """.trimMargin(),
                          true,
                          "-dataType", "long", "-sortingType", "natural"
                  ),
                  createTest(
                          """
                      |1 -2   333 4
                      |42
                      |1                 1
                      """.trimMargin(),
                          true,
                          "-dataType", "long"
                  ),
                  createTest(
                          """
                      |1 -2   333 4
                      |42
                      |1                 1
                      """.trimMargin(),
                          true,
                          "-sortingType", "byCount", "-dataType", "long"
                  ),
                  createTest(
                          """
                      |1 -2   333 4
                      |42
                      |1                 1
                      """.trimMargin(),
                          true,
                          "-sortingType", "byCount", "-dataType", "word"
                  ),
                  createTest(
                          """
                      |1 -2   333 4
                      |42
                      |42
                      |1                 1
                      """.trimMargin(),
                          true,
                          "-sortingType", "byCount", "-dataType", "line"
                  ),
                  createTest(
                          """
                      |1111 1111
                      |22222
                      |3
                      |44
                      """.trimMargin(),
                          false,
                          "-sortingType", "byCount", "-dataType", "line"
                  ),
                  createTest(
                          """
                      |1111 1111
                      |22222
                      |3
                      |44
                      """.trimMargin(),
                          false,
                          "-sortingType", "byCount", "-dataType", "word"
                  ),
                  createTest(
                          """
                      |1111 1111
                      |22222
                      |3
                      |44
                      """.trimMargin(),
                          false,
                          "-sortingType", "byCount", "-dataType", "long"
                  )
          )
      }
      
      
      fun revealRawTest(clue: SortingToolClue, reply: String): String {
          return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
      }
      
      class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)
      
      fun createTest(
              consoleInput: String,
              revealTest: Boolean,
              vararg args: String = arrayOf("-dataType", "long")
      ): TestCase<SortingToolClue> {
          return TestCase<SortingToolClue>()
                  .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                  .setInput(consoleInput)
                  .addArguments(*args)
      }
      
      fun parseLongTokens(input: String): List<Int> {
          val scanner = Scanner(input)
      
          val longTokens = mutableListOf<Int>()
      
          while (scanner.hasNextInt()) {
              longTokens.add(scanner.nextInt())
          }
      
          return longTokens
      }
      
      fun parseWordTokens(input: String): List<String> {
          val scanner = Scanner(input)
      
          val wordTokens = mutableListOf<String>()
      
          while (scanner.hasNext()) {
              wordTokens.add(scanner.next())
          }
      
          return wordTokens
      }
      
      fun parseLineTokens(input: String): List<String> {
          return input.lines()
      }
      
      fun <TokenType : Comparable<TokenType>> checkNatural(
              actualTokens: List<TokenType>,
              sortedTokensParser: (String) -> List<TokenType>,
              clue: SortingToolClue,
              reply_: String
      ): CheckResult {
          val reply = reply_.trim()
          val lines = reply.lines()
      
          if (lines.size != 2) {
              return if (clue.revealTest) {
                  CheckResult(
                          false,
                          "Can't parse your output: expected 2 lines.\n" +
                                  revealRawTest(clue, reply)
                  )
              } else {
                  CheckResult(false, "Can't parse your output: expected 2 lines.")
              }
          }
      
          val totalRegex = """(\d+)""".toRegex()
          val totalMatchResult = totalRegex.find(lines[0])
          if (totalMatchResult == null) {
              return if (clue.revealTest) {
                  CheckResult(
                          false,
                          "Can't find number in the first line of your output.\n" +
                                  revealRawTest(clue, reply)
                  )
              } else {
                  CheckResult(false, "Can't find number in the first line of your output.")
              }
          }
      
          val totalTokens = totalMatchResult.groupValues[1].toInt()
      
          val actualTotal = actualTokens.size
      
          if (actualTotal != totalTokens) {
              return if (clue.revealTest) {
                  CheckResult(
                          false,
                          "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                  revealRawTest(clue, reply)
                  )
              } else {
                  CheckResult(false, "Total tokens are incorrect.")
              }
          }
      
          val sortedActualTokens = actualTokens.sorted()
      
          val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })
      
          val total = sortedTokens.size
      
          if (actualTotal != total) {
              return if (clue.revealTest) {
                  CheckResult(
                          false,
                          "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                  revealRawTest(clue, reply)
                  )
              } else {
                  CheckResult(false, "Total sorted tokens are incorrect.")
              }
          }
      
          if (sortedActualTokens != sortedTokens) {
              return if (clue.revealTest) {
                  CheckResult(
                          false,
                          "Sorted tokens are incorrect.\n" +
                                  revealRawTest(clue, reply)
                  )
              } else {
                  CheckResult(false, "Sorted tokens are incorrect.")
              }
          }
      
          return CheckResult(true)
      }
      
      fun <TokenType : Comparable<TokenType>> checkByCount(
              actualTokens: List<TokenType>,
              tokenParser: (String) -> TokenType,
              clue: SortingToolClue,
              reply_: String
      ): CheckResult {
          val reply = reply_.trim()
          val lines = reply.lines()
      
          val totalRegex = """(\d+)""".toRegex()
          val totalMatchResult = totalRegex.find(lines[0])
          if (totalMatchResult == null) {
              return if (clue.revealTest) {
                  CheckResult(
                          false,
                          "Can't find number in the first line of your output.\n" +
                                  revealRawTest(clue, reply)
                  )
              } else {
                  CheckResult(false, "Can't find number in the first line of your output.")
              }
          }
      
          val totalTokens = totalMatchResult.groupValues[1].toInt()
      
          val actualTotal = actualTokens.size
      
          if (actualTotal != totalTokens) {
              return if (clue.revealTest) {
                  CheckResult(
                          false,
                          "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                  revealRawTest(clue, reply)
                  )
              } else {
                  CheckResult(false, "Total tokens are incorrect.")
              }
          }
      
          val tokenToCount = mutableMapOf<TokenType, Int>()
      
          for (token in actualTokens) {
              tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
          }
      
          val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
          val linesWithTokens = lines.drop(1)
      
          if (actualSortedByCount.size != linesWithTokens.size) {
              return if (clue.revealTest) {
                  CheckResult(
                          false,
                          "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                  revealRawTest(clue, reply)
                  )
              } else {
                  CheckResult(false, "Lines with tokens are incorrect.")
              }
          }
      
          for ((lineId, line) in linesWithTokens.withIndex()) {
              val token = tokenParser(line.substringBefore(':'))
              val info = line.substringAfter(':')
      
              val (actualToken, actualTimes) = actualSortedByCount[lineId]
      
              if (token != actualToken) {
                  return if (clue.revealTest) {
                      CheckResult(
                              false,
                              "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                      revealRawTest(clue, reply)
                      )
                  } else {
                      CheckResult(false, "Token is incorrect.")
                  }
              }
      
              // TODO: check info (times and percentage)
          }
      
          return CheckResult(true)
      }
    
    learner_created: false
feedback_link: https://hyperskill.org/projects/45/stages/243/implement#comment
status: Solved
record: 4
